from fabric import task

from benchmark.local import LocalBench
from benchmark.logs import ParseError, LogParser
from benchmark.utils import Print
from benchmark.plot import Ploter, PlotError
from benchmark.instance import InstanceManager
from benchmark.remote import Bench, BenchError


@task
def local(ctx):
    ''' Run benchmarks on localhost '''
    bench_params = {
        'faults': 0,
        'nodes': 4,
        'rate': 1_000_000,
        'tx_size': 128,
        'duration': 10,
    }
    node_params = {
        'consensus': {
            'timeout_delay': 5_000,
            'sync_retry_delay': 5_000,
        },
        'mempool': {
            'gc_depth': 50,
            'sync_retry_delay': 5_000,
            'sync_retry_nodes': 3,
            'batch_size': 500_000,
            'max_batch_delay': 10
        }
    }
    carrier_params = {
        "enable-carrier": "false",

        "init-threshold": 10000,
        "forward-mode": "false",
        "log-level": "info",

        "carrier-conn-retry-delay": 1000,
        "carrier-conn-max-retry": 0,
        "node-conn-retry-delay": 1000,
        "node-conn-max-retry": 0,

        "local-base-port": 6000,
        "local-front-port": 9000,
    }
    try:
        ret = LocalBench(bench_params, node_params, carrier_params).run(debug=False).result()
        print(ret)
    except BenchError as e:
        Print.error(e)


@task
def create(ctx, nodes=13):
    ''' Create a testbed'''
    try:
        InstanceManager.make().create_instances(nodes)
    except BenchError as e:
        Print.error(e)


@task
def destroy(ctx):
    ''' Destroy the testbed '''
    try:
        InstanceManager.make().terminate_instances()
    except BenchError as e:
        Print.error(e)

@task
def cancel(ctx):
    ''' Cancel all spot requests '''
    try:
        InstanceManager.make().cancel_spot_request()
    except BenchError as e:
        Print.error(e)




@task
def start(ctx, max=2):
    ''' Start at most `max` machines per data center '''
    try:
        InstanceManager.make().start_instances(max)
    except BenchError as e:
        Print.error(e)


@task
def stop(ctx):
    ''' Stop all machines '''
    try:
        InstanceManager.make().stop_instances()
    except BenchError as e:
        Print.error(e)


@task
def info(ctx):
    ''' Display connect information about all the available machines '''
    try:
        InstanceManager.make().print_info()
    except BenchError as e:
        Print.error(e)


@task
def install(ctx):
    ''' Install the codebase on all machines '''
    try:
        Bench(ctx).install()
    except BenchError as e:
        Print.error(e)


@task
def remote(ctx):
    ''' Run benchmarks on AWS '''
    bench_params = {
        'faults': 0,
        'nodes': [4, 10, 25, 49],
        'rate': [50_000, 100_000, 200_000, 500_000, 1_000_000],
        'tx_size': 128,
        'duration': 60,
        'runs': 1,
    }
    node_params = {
        'consensus': {
            'timeout_delay': 5_000,
            'sync_retry_delay': 5_000,
        },
        'mempool': {
            'gc_depth': 50,
            'sync_retry_delay': 5_000,
            'sync_retry_nodes': 3,
            'batch_size': 500_000,
            'max_batch_delay': 100
        }
    }
    carrier_params = {
        "enable-carrier": "true",

        "init-threshold": 100000,
        "forward-mode": "false",
        "log-level": "info",

        "carrier-conn-retry-delay": 1000,
        "carrier-conn-max-retry": 0,
        "node-conn-retry-delay": 1000,
        "node-conn-max-retry": 0,

        "local-base-port": 6000,
        "local-front-port": 9000,
    }
    try:
        Bench(ctx).run(bench_params, node_params, carrier_params, debug=False)
    except BenchError as e:
        Print.error(e)


@task
def plot(ctx):
    ''' Plot performance using the logs generated by "fab remote" '''
    plot_params = {
        'faults': [0],
        'nodes': [4, 10, 25, 49],
        'tx_size': 128,
        'max_latency': [1000, 10000, 20000, 50000, 100000],
        'init_threshold': [10000, 100000]
    }
    plot_settings = {
        'enable_carrier': True
    }
    try:
        Ploter.plot(plot_params, plot_settings)
    except PlotError as e:
        Print.error(BenchError('Failed to plot performance', e))


@task
def kill(ctx):
    ''' Stop any HotStuff execution on all machines '''
    try:
        Bench(ctx).kill()
    except BenchError as e:
        Print.error(e)


@task
def logs(ctx):
    ''' Print a summary of the logs '''
    try:
        enable_carrier = False
        carrier_init_threshold = 10000
        tx_size = 128
        faults = 0
        print(LogParser.process('./logs', faults, enable_carrier, carrier_init_threshold, tx_size).result())
    except ParseError as e:
        Print.error(BenchError('Failed to parse logs', e))
